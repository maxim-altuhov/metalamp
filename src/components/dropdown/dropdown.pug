//- components
include ~@comp/button/button.pug

//- 
  const options = {
    elements: {String: Number},
    attributeName: String,
    labelText: String,
    textInInput: String,
    addControlBtn: Boolean,
    isOpen: Boolean,
    isValidate: Boolean,
  };
mixin dropdown(options = {})
  - const { elements = {}, attributeName = "", labelText = "label", textInInput = "", addControlBtn = false, isOpen = false, isValidate = false } = options;
  - const openClass = isOpen ? "dropdown__group-fields_opened" : "";
    .dropdown
      div(class=`dropdown__group-fields js-dropdown__group-fields ${openClass}` id= id)
        label.dropdown__label= labelText
          input.dropdown__field-input.js-dropdown__field-input.dropdown__field_hidden(name=attributeName type="text" autocomplete="off" value="" tabindex="-1" data-validate=`${isValidate}`)
        .dropdown__field.js-dropdown__field(tabindex="0")
          .dropdown__field-result.js-dropdown__field-result= textInInput
          span(class="dropdown__field-arrow js-dropdown__field-arrow") keyboard_arrow_down
        .dropdown__field-block(tabindex="0")
          .dropdown__field-wrapper
            each value, element in elements
              .dropdown__field-elem.js-dropdown__field-elem
                span.dropdown__field-item= element
                .dropdown__field-counter.js-dropdown__field-counter
                  button.dropdown__field-counter-btn(disabled type="button" data-dropdown-minus) -
                  span.dropdown__field-item= value
                  button.dropdown__field-counter-btn(type="button" data-dropdown-plus) +
          if addControlBtn
            .dropdown__field-control
              .dropdown__field-control-item.dropdown__field-control-item_hidden
                +button({theme:"simple", text:"Очистить", dataFunction:"clear"})
              .dropdown__field-control-item
                +button({theme:"simple", text:"Применить", dataFunction:"apply"})
          .dropdown__field-limiter.js-dropdown__field-limiter(tabindex="0")