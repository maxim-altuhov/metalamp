//- components
include ~@comp/button/button.pug
//-
//- const {id, elements, attributeName, labelText, textInInput, addBtn(boolean), open(boolean), mini(boolean), isValidate(boolean), addClass}, ...elements = options;
mixin dropdown(options)
  - const { id, elements, attributeName, labelText, textInInput, addBtn, open, mini, isValidate, addClass = "" } = options;
  - const openClass = open ? "dropdown__group-fields_active" : "";
  - const miniClass = mini ? "dropdown__group-fields_small" : "";
  - const validate = isValidate ? true : false;
    .dropdown
      div(class="dropdown__group-fields js-dropdown__group-fields" + ` ${openClass}` + ` ${miniClass}` +` ${addClass}` id= id)
        label.dropdown__label= labelText
          input.dropdown__field-input.js-dropdown__field-input.dropdown__field-hidden(name=attributeName type="text" autocomplete="off" value="" tabindex="-1" data-validate=`${validate}`)
        .dropdown__field.js-dropdown__field(tabindex="0")
          .dropdown__field-result.js-dropdown__field-result= textInInput
          span(class="dropdown__field-arrow js-dropdown__field-arrow material-icons") keyboard_arrow_down
        .dropdown__field-block(tabindex="0")
          .dropdown__field-wrapper
            each value, element in elements
              .dropdown__field-elem.js-dropdown__field-elem
                span.dropdown__field-item= element
                .dropdown__field-counter.js-dropdown__field-counter
                  button(disabled type="button" data-dropdown-minus) -
                  span= value
                  button(type="button" data-dropdown-plus) +
          if addBtn
            .dropdown__field-control
              +button({mod:"simple", text:"Очистить", btnType:"button", btnFunction:"clear"}, addclass="elem-hidden")
              +button({mod:"simple", text:"Применить", btnType:"button", btnFunction:"apply"})
          .dropdown__field-limiter.js-dropdown__field-limiter(tabindex="0")